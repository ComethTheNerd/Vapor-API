/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:13*/
package vapor.widget;

import java.util.ArrayList;

import vapor.view.VaporXView;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Parcelable;
import android.view.animation.Interpolator;
import android.widget.ProgressBar;

/**
 * Fluent variadic Vapor companion to ProgressBar, a visual indicator of
 * progress in some operation. Displays a bar to the user representing how far
 * the operation has progressed; the application can change the amount of
 * progress (modifying the length of the bar) as it moves forward. There is also
 * a secondary progress displayable on a progress bar which is useful for
 * displaying intermediate progress, such as the buffer level during a streaming
 * playback progress bar.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <T>
 *            A standard Android type derived from ProgressBar
 * @param <X>
 *            A Vapor type derived from VaporProgressBar
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public class VaporXProgressBar<T extends ProgressBar, X extends VaporProgressBar<T, ?>, self extends VaporXProgressBar<T, X, self>>
		extends VaporXView<T, X, self> {

	public VaporXProgressBar(Integer... ids) {
		super(ids);
	}

	public VaporXProgressBar(T... progressBars) {
		super(progressBars);
	}

	public VaporXProgressBar(X... vaporProgressBars) {
		super(vaporProgressBars);
	}

	public VaporXProgressBar(VaporXProgressBar<T, X, ?>... vaporXProgressBars) {
		super(vaporXProgressBars);
	}

	public VaporXProgressBar(Object... progressBarItems) {
		super(progressBarItems);
	}

	/**
	 * Get the drawable used to draw the progress bar in indeterminate mode.
	 * 
	 * @return a Drawable instance
	 */
	public ArrayList<Drawable> indeterminateImg() {
		int _size = this.members.size();
		ArrayList<Drawable> _returns = new ArrayList<Drawable>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).indeterminateImg());
		return _returns;
	}

	/**
	 * Define the drawable used to draw the progress bar in indeterminate mode.
	 * 
	 * @param drawable
	 *            the new drawable
	 * @return this
	 */
	public self indeterminateImg(Drawable drawable) {
		for (X vaporView : members)
			vaporView.indeterminateImg(drawable);
		return (self) this;

	}

	/**
	 * Gets the acceleration curve type for the indeterminate animation.
	 * 
	 * @return the Interpolator associated to this animation
	 */
	public ArrayList<Interpolator> interpolator() {
		int _size = this.members.size();
		ArrayList<Interpolator> _returns = new ArrayList<Interpolator>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).interpolator());
		return _returns;
	}

	/**
	 * Sets the acceleration curve for the indeterminate animation. Defaults to
	 * a linear interpolation.
	 * 
	 * @param interpolator
	 *            The interpolator which defines the acceleration curve
	 * @return this
	 */
	public self interpolator(Interpolator interpolator) {
		for (X vaporView : members)
			vaporView.interpolator(interpolator);
		return (self) this;

	}

	/**
	 * Sets the acceleration curve for the indeterminate animation. The
	 * interpolator is loaded as a resource from the specified context.
	 * 
	 * @param context
	 *            The application environment
	 * @param resId
	 *            The resource identifier of the interpolator to load
	 * @return this
	 */
	public self interpolator(Context context, int resId) {
		for (X vaporView : members)
			vaporView.interpolator(context, resId);
		return (self) this;

	}

	/**
	 * Set the current secondary progress to the specified value. Does not do
	 * anything if the progress bar is in indeterminate mode.
	 * 
	 * @param secondaryProgress
	 *            the new secondary progress, between 0 and max()
	 * @return this
	 */
	public self progress2nd(int secondaryProgress) {
		for (X vaporView : members)
			vaporView.progress2nd(secondaryProgress);
		return (self) this;

	}

	/**
	 * Get the drawable used to draw the progress bar in progress mode.
	 * 
	 * @return a Drawable instance
	 */
	public ArrayList<Drawable> progressImg() {
		int _size = this.members.size();
		ArrayList<Drawable> _returns = new ArrayList<Drawable>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).progressImg());
		return _returns;
	}

	/**
	 * Define the drawable used to draw the progress bar in progress mode.
	 * 
	 * @param drawable
	 *            the new drawable
	 * @return this
	 */
	public self progressImg(Drawable drawable) {
		for (X vaporView : members)
			vaporView.progressImg(drawable);
		return (self) this;

	}

	/**
	 * Fluent equivalent Vapor method for invoking
	 * onRestoreInstanceState(Parcelable), a hook allowing a view to re-apply a
	 * representation of its internal state that had previously been generated by
	 * save(). This function will never be called with a null state.
	 * 
	 * @param state
	 *            The frozen state that had previously been returned by save().
	 * @return this
	 */
	public self restore(Parcelable state) {
		for (X vaporView : members)
			vaporView.restore(state);
		return (self) this;

	}

	/**
	 * Fluent equivalent Vapor method for invoking onSaveInstanceState(), a hook
	 * allowing a view to generate a representation of its internal state that
	 * can later be used to create a new instance with that same state. This
	 * state should only contain information that is not persistent or can not be
	 * reconstructed later.
	 * 
	 * @return Returns a Parcelable object containing the view's current dynamic
	 *         state, or null if there is nothing interesting to save. The
	 *         default implementation returns null.
	 */
	public ArrayList<Parcelable> save() {
		int _size = this.members.size();
		ArrayList<Parcelable> _returns = new ArrayList<Parcelable>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).save());
		return _returns;
	}

}