/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:12*/
package vapor.widget;

import java.util.ArrayList;

import android.graphics.drawable.Drawable;
import android.widget.CalendarView;

/**
 * Fluent variadic Vapor companion to CalendarView, a widget for displaying and
 * selecting dates. The range of dates supported by this calendar is
 * configurable. A user can select a date by taping on it and can scroll and
 * fling the calendar to a desired date.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <T>
 *            A standard Android type derived from CalendarView
 * @param <X>
 *            A Vapor type derived from VaporCalendarView
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public class VaporXCalendarView<T extends CalendarView, X extends VaporCalendarView<T, ?>, self extends VaporXCalendarView<T, X, self>>
		extends VaporXFrameLayout<T, X, self> {

	public VaporXCalendarView(Integer... ids) {
		super(ids);
	}

	public VaporXCalendarView(T... calendarViews) {
		super(calendarViews);
	}

	public VaporXCalendarView(X... vaporCalendarViews) {
		super(vaporCalendarViews);
	}

	public VaporXCalendarView(
			VaporXCalendarView<T, X, ?>... vaporXCalendarViews) {
		super(vaporXCalendarViews);
	}

	public VaporXCalendarView(Object... calendarViewItems) {
		super(calendarViewItems);
	}

	/**
	 * Gets the text appearance for the calendar dates.
	 * 
	 * @return The text appearance resource id.
	 */
	public ArrayList<Integer> appearance() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).appearance());
		return _returns;
	}

	/**
	 * Sets the text appearance for the calendar dates.
	 * 
	 * @param resId
	 *            The text appearance resource id.
	 * @return self
	 */
	public self appearance(int resId) {
		for (X vaporView : members)
			vaporView.appearance(resId);
		return (self) this;

	}

	/**
	 * Gets the selected date in milliseconds since January 1, 1970 00:00:00 in
	 * getDefault() time zone.
	 * 
	 * @return The selected date.
	 */
	public ArrayList<Long> date() {
		int _size = this.members.size();
		ArrayList<Long> _returns = new ArrayList<Long>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).date());
		return _returns;
	}

	/**
	 * Sets the listener to be notified upon selected date change.
	 * 
	 * @param dateChangeListener
	 *            The listener to be notified.
	 * @return self
	 */
	public self date(vapor.listeners.widget.calendar.$change dateChangeListener) {
		for (X vaporView : members)
			vaporView.date(dateChangeListener);
		return (self) this;

	}

	/**
	 * Sets the selected date in milliseconds since January 1, 1970 00:00:00 in
	 * getDefault() time zone.
	 * 
	 * @param date
	 *            The selected date.
	 * @return self
	 */
	public self date(long date) {
		for (X vaporView : members)
			vaporView.date(date);
		return (self) this;

	}

	/**
	 * Sets the selected date in milliseconds since January 1, 1970 00:00:00 in
	 * getDefault() time zone.
	 * 
	 * @param date
	 *            The date.
	 * @param animate
	 *            Whether to animate the scroll to the current date.
	 * @param center
	 *            Whether to center the current date even if it is already
	 *            visible.
	 * @return self
	 */
	public self date(long date, boolean animate, boolean center) {
		for (X vaporView : members)
			vaporView.date(date, animate, center);
		return (self) this;

	}

	/**
	 * Gets the first day of week.
	 * 
	 * @return The first day of the week conforming to the CalendarView APIs.
	 */
	public ArrayList<Integer> firstWeekDay() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).firstWeekDay());
		return _returns;
	}

	/**
	 * Sets the first day of week.
	 * 
	 * @param firstDayOfWeek
	 *            The first day of the week conforming to the CalendarView APIs.
	 * @return self
	 */
	public self firstWeekDay(int firstDayOfWeek) {
		for (X vaporView : members)
			vaporView.firstWeekDay(firstDayOfWeek);
		return (self) this;

	}

	/**
	 * Gets the maximal date supported by this CalendarView in milliseconds
	 * since January 1, 1970 00:00:00 in getDefault() time zone.
	 * 
	 * @return The maximal supported date.
	 */
	public ArrayList<Long> maxDate() {
		int _size = this.members.size();
		ArrayList<Long> _returns = new ArrayList<Long>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).maxDate());
		return _returns;
	}

	/**
	 * Sets the maximal date supported by this CalendarView in milliseconds
	 * since January 1, 1970 00:00:00 in getDefault() time zone.
	 * 
	 * @param maxDate
	 *            The maximal supported date.
	 * @return self
	 */
	public self maxDate(long maxDate) {
		for (X vaporView : members)
			vaporView.maxDate(maxDate);
		return (self) this;

	}

	/**
	 * Gets the minimal date supported by this CalendarView in milliseconds
	 * since January 1, 1970 00:00:00 in getDefault() time zone.
	 * 
	 * @return The minimal supported date.
	 */
	public ArrayList<Long> minDate() {
		int _size = this.members.size();
		ArrayList<Long> _returns = new ArrayList<Long>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).minDate());
		return _returns;
	}

	/**
	 * Sets the minimal date supported by this CalendarView in milliseconds
	 * since January 1, 1970 00:00:00 in getDefault() time zone.
	 * 
	 * @param minDate
	 *            The minimal supported date.
	 * @return self
	 */
	public self minDate(long minDate) {
		for (X vaporView : members)
			vaporView.minDate(minDate);
		return (self) this;

	}

	/**
	 * Gets the color for the dates in the focused month.
	 * 
	 * @param focused
	 *            true to return the color for a focused month
	 * @return The focused month date color.
	 */
	public ArrayList<Integer> monthColor(boolean focused) {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).monthColor(focused));
		return _returns;
	}

	/**
	 * Sets the color for the dates of the focused month.
	 * 
	 * @param color
	 *            The focused month date color.
	 * @param focused
	 *            true if this applies to a focused month
	 * @return self
	 */
	public self monthColor(int color, boolean focused) {
		for (X vaporView : members)
			vaporView.monthColor(color, focused);
		return (self) this;

	}

	/**
	 * Gets the drawable for the vertical bar shown at the beginning and at the
	 * end of the selected date.
	 * 
	 * @return The vertical bar drawable.
	 */
	public ArrayList<Drawable> selectedDateBar() {
		int _size = this.members.size();
		ArrayList<Drawable> _returns = new ArrayList<Drawable>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).selectedDateBar());
		return _returns;
	}

	/**
	 * Sets the drawable for the vertical bar shown at the beginning and at the
	 * end of the selected date.
	 * 
	 * @param resId
	 *            The vertical bar drawable resource id.
	 * @return self
	 */
	public self selectedDateBar(int resId) {
		for (X vaporView : members)
			vaporView.selectedDateBar(resId);
		return (self) this;

	}

	/**
	 * Sets the drawable for the vertical bar shown at the beginning and at the
	 * end of the selected date.
	 * 
	 * @param drawable
	 *            The vertical bar drawable.
	 * @return self
	 */
	public self selectedDateBar(Drawable drawable) {
		for (X vaporView : members)
			vaporView.selectedDateBar(drawable);
		return (self) this;

	}

	/**
	 * Gets the background color for the selected week.
	 * 
	 * @return The week background color.
	 */
	public ArrayList<Integer> selectedWeekBgColor() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).selectedWeekBgColor());
		return _returns;
	}

	/**
	 * Sets the background color for the selected week.
	 * 
	 * @param color
	 *            The week background color.
	 * @return self
	 */
	public self selectedWeekBgColor(int color) {
		for (X vaporView : members)
			vaporView.selectedWeekBgColor(color);
		return (self) this;

	}

	/**
	 * Sets whether to show the week number.
	 * 
	 * @param showWeekNumber
	 *            True to show the week number.
	 * @return self
	 */
	public self weekNums(boolean showWeekNumber) {
		for (X vaporView : members)
			vaporView.weekNums(showWeekNumber);
		return (self) this;

	}

	/**
	 * Gets whether to show the week number.
	 * 
	 * @return True if showing the week number.
	 */
	public ArrayList<Boolean> weekNums() {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).weekNums());
		return _returns;
	}

	/**
	 * Gets the number of weeks to be shown.
	 * 
	 * @return The shown week count.
	 */
	public ArrayList<Integer> weeks() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).weeks());
		return _returns;
	}

	/**
	 * Sets the number of weeks to be shown.
	 * 
	 * @param shownWeekCount
	 *            The shown week count.
	 * @return self
	 */
	public self weeks(int shownWeekCount) {
		for (X vaporView : members)
			vaporView.weeks(shownWeekCount);
		return (self) this;

	}

	/**
	 * Gets the text appearance for the week day abbreviation of the calendar
	 * header.
	 * 
	 * @return The text appearance resource id.
	 */
	public ArrayList<Integer> weekDayAppearance() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).weekDayAppearance());
		return _returns;
	}

	/**
	 * Sets the text appearance for the week day abbreviation of the calendar
	 * header.
	 * 
	 * @param resId
	 *            The text appearance resource id.
	 * @return self
	 */
	public self weekDayAppearance(int resId) {
		for (X vaporView : members)
			vaporView.weekDayAppearance(resId);
		return (self) this;

	}

	/**
	 * Gets the color for the week numbers.
	 * 
	 * @return The week number color.
	 */
	public ArrayList<Integer> weekNumColor() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).weekNumColor());
		return _returns;
	}

	/**
	 * Sets the color for the week numbers.
	 * 
	 * @param color
	 *            The week number color.
	 * @return self
	 */
	public self weekNumColor(int color) {
		for (X vaporView : members)
			vaporView.weekNumColor(color);
		return (self) this;

	}

	/**
	 * Gets the color for the separator line between weeks.
	 * 
	 * @return The week separator color.
	 */
	public ArrayList<Integer> weekDivColor() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).weekDivColor());
		return _returns;
	}

	/**
	 * Sets the color for the separator line between weeks.
	 * 
	 * @param color
	 *            The week separator color.
	 * @return self
	 */
	public self weekDivColor(int color) {
		for (X vaporView : members)
			vaporView.weekDivColor(color);
		return (self) this;

	}

}