/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:10*/
package vapor.widget;

import java.util.ArrayList;

import vapor.view.VaporView;
import vapor.view.VaporXViewGroup;
import android.view.View;
import android.widget.Adapter;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.AdapterView.OnItemSelectedListener;

/**
 * Fluent variadic Vapor companion to AdapterView, a view whose children are
 * determined by an Adapter.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <U>
 *            A standard Android type derived from Adapter
 * @param <T>
 *            A standard Android type derived from AdapterView
 * @param <X>
 *            A Vapor type derived from VaporAdapterView
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public abstract class VaporXAdapterView<U extends Adapter, T extends AdapterView<U>, X extends VaporAdapterView<U, T, ?>, self extends VaporXAdapterView<U, T, X, self>>
		extends VaporXViewGroup<T, X, self> {

	public VaporXAdapterView(Integer... ids) {
		super(ids);
	}

	public VaporXAdapterView(T... adapterViews) {
		super(adapterViews);
	}

	public VaporXAdapterView(X... vaporAdapterViews) {
		super(vaporAdapterViews);
	}

	public VaporXAdapterView(
			VaporXAdapterView<U, T, X, ?>... vaporXAdapterViews) {
		super(vaporXAdapterViews);
	}

	public VaporXAdapterView(Object... adapterViewItems) {
		super(adapterViewItems);
	}

	/**
	 * Returns the adapter currently associated with this widget.
	 * 
	 * @return The adapter used to provide this view's content.
	 */
	public abstract ArrayList<U> adapter();

	/**
	 * Sets the adapter that provides the data and the views to represent the
	 * data in this widget.
	 * 
	 * @param adapter
	 *            The adapter to use to create this view's content.
	 * @return this
	 */
	public abstract self adapter(U adapter);

	/**
	 * 
	 * @return The number of items owned by the Adapter associated with this
	 *         AdapterView.
	 */
	public ArrayList<Integer> count() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).count());
		return _returns;
	}

	/**
	 * Sets the view to show if the adapter is empty
	 * 
	 * @param emptyView
	 * @return this
	 */
	public self emptyView(VaporView<? extends View, ?> emptyView) {
		for (X vaporView : members)
			vaporView.emptyView(emptyView);
		return (self) this;

	}

	/**
	 * Returns the position within the adapter's data set for the first item
	 * displayed on screen.
	 * 
	 * @return The position within the adapter's data set
	 */
	public ArrayList<Integer> firstViz() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).firstViz());
		return _returns;
	}

	/**
	 * Get the position within the adapter's data set for the view, where view
	 * is a an adapter item or a descendant of an adapter item.
	 * 
	 * @param view
	 *            an adapter item, or a descendant of an adapter item. This must
	 *            be visible in this AdapterView at the time of the call.
	 * @return the position within the adapter's data set of the view, or
	 *         INVALID_POSITION if the view does not correspond to a list item
	 *         (or it is not currently visible).
	 */
	public ArrayList<Integer> index(VaporView<? extends View, ?> view) {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).index(view));
		return _returns;
	}

	/**
	 * 
	 * @return The data corresponding to the currently selected item, or null if
	 *         there is nothing selected.
	 */
	public ArrayList<Object> itemSelected() {
		int _size = this.members.size();
		ArrayList<Object> _returns = new ArrayList<Object>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemSelected());
		return _returns;
	}

	/**
	 * Gets the data associated with the specified position in the list.
	 * 
	 * @param position
	 *            Which data to get
	 * @return The data associated with the specified position in the list
	 */
	public ArrayList<Object> item(int position) {
		int _size = this.members.size();
		ArrayList<Object> _returns = new ArrayList<Object>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).item(position));
		return _returns;
	}

	/**
	 * Call the OnItemClickListener, if it is defined.
	 * 
	 * @param view
	 *            The view within the AdapterView that was clicked.
	 * @param position
	 *            The position of the view in the adapter.
	 * @param id
	 *            The position of the view in the adapter.
	 * @return True if there was an assigned OnItemClickListener that was
	 *         called, false otherwise is returned.
	 */
	public ArrayList<Boolean> itemClick(VaporView<? extends View, ?> view,
			int position, long id) {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemClick(view, position, id));
		return _returns;
	}

	/**
	 * Register a callback to be invoked when an item in this AdapterView has
	 * been clicked.
	 * 
	 * @param itemClickListener
	 *            The callback that will be invoked.
	 * @return this
	 */
	public self itemClick(
			vapor.listeners.widget.adapterview.$click itemClickListener) {
		for (X vaporView : members)
			vaporView.itemClick(itemClickListener);
		return (self) this;

	}

	/**
	 * 
	 * @return The id corresponding to the currently selected item, or
	 *         INVALID_ROW_ID if nothing is selected.
	 */
	public ArrayList<Long> itemId() {
		int _size = this.members.size();
		ArrayList<Long> _returns = new ArrayList<Long>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemId());
		return _returns;
	}

	/**
	 * Gets the id associated with the specified position in the list.
	 * 
	 * @param position
	 *            Which id to get
	 * @return The id associated with the specified position in the list
	 */
	public ArrayList<Long> itemId(int position) {
		int _size = this.members.size();
		ArrayList<Long> _returns = new ArrayList<Long>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemId(position));
		return _returns;
	}

	/**
	 * Return the position of the currently selected item within the adapter's
	 * data set
	 * 
	 * @return int Position (starting at 0), or INVALID_POSITION if there is
	 *         nothing selected.
	 */
	public ArrayList<Integer> indexSelected() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).indexSelected());
		return _returns;
	}

	/**
	 * 
	 * @return The callback to be invoked with an item in this AdapterView has
	 *         been clicked, or null id no callback has been set.
	 */
	public final ArrayList<OnItemClickListener> itemClickListener() {
		int _size = this.members.size();
		ArrayList<OnItemClickListener> _returns = new ArrayList<OnItemClickListener>(
				_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemClickListener());
		return _returns;
	}

	/**
	 * Register a callback to be invoked when an item in this AdapterView has
	 * been selected.
	 * 
	 * @param itemLongClickListener
	 *            The callback that will run
	 * @return this
	 */
	public self itemLongClick(
			vapor.listeners.widget.adapterview.$longClick itemLongClickListener) {
		for (X vaporView : members)
			vaporView.itemLongClick(itemLongClickListener);
		return (self) this;

	}

	/**
	 * 
	 * @return The callback to be invoked with an item in this AdapterView has
	 *         been clicked and held, or null id no callback as been set.
	 */
	public final ArrayList<OnItemLongClickListener> itemLongClickListener() {
		int _size = this.members.size();
		ArrayList<OnItemLongClickListener> _returns = new ArrayList<OnItemLongClickListener>(
				_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemLongClickListener());
		return _returns;
	}

	/**
	 * 
	 * @return
	 */
	public final ArrayList<OnItemSelectedListener> itemSelectedListener() {
		int _size = this.members.size();
		ArrayList<OnItemSelectedListener> _returns = new ArrayList<OnItemSelectedListener>(
				_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemSelectedListener());
		return _returns;
	}

	/**
	 * Register a callback to be invoked when an item in this AdapterView has
	 * been clicked.
	 * 
	 * @param itemSelectedListener
	 *            the callback that will be invoked
	 * @return self
	 */
	public self itemSelected(
			vapor.listeners.widget.adapterview.$select itemSelectedListener) {
		for (X vaporView : members)
			vaporView.itemSelected(itemSelectedListener);
		return (self) this;
	}

	/**
	 * Returns the position within the adapter's data set for the last item
	 * displayed on screen.
	 * 
	 * @return The position within the adapter's data set
	 */
	public ArrayList<Integer> lastVizPos() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).lastVizPos());
		return _returns;
	}

}