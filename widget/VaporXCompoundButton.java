/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:12*/
package vapor.widget;

import java.util.ArrayList;

import android.os.Parcelable;
import android.widget.CompoundButton;

/**
 * Fluent variadic Vapor companion to CompoundButton, a button with two states,
 * checked and unchecked. When the button is pressed or clicked, the state
 * changes automatically.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <T>
 *            A standard Android type derived from CompoundButton
 * @param <X>
 *            A Vapor type derived from VaporCompoundButton
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public abstract class VaporXCompoundButton<T extends CompoundButton, X extends VaporCompoundButton<T, ?>, self extends VaporXCompoundButton<T, X, self>>
		extends VaporXButton<T, X, self> {

	public VaporXCompoundButton(Integer... ids) {
		super(ids);
	}

	public VaporXCompoundButton(T... compoundButtons) {
		super(compoundButtons);
	}

	public VaporXCompoundButton(X... vaporCompoundButtons) {
		super(vaporCompoundButtons);
	}

	public VaporXCompoundButton(
			VaporXCompoundButton<T, X, ?>... vaporXCompoundButtons) {
		super(vaporXCompoundButtons);
	}

	public VaporXCompoundButton(Object... compoundButtonItems) {
		super(compoundButtonItems);
	}

	/**
	 * Changes the checked state of this button.
	 * 
	 * @param checked
	 *            true to check the button, false to uncheck it
	 * @return self
	 */
	public self checked(boolean checked) {
		for (X vaporView : members)
			vaporView.checked(checked);
		return (self) this;

	}

	/**
	 * Register a callback to be invoked when the checked state of this button
	 * changes.
	 * 
	 * @param checkedChangeListener
	 *            the callback to call on checked state change
	 * @return self
	 */
	public self checked(
			vapor.listeners.widget.compoundbutton.$checked checkedChangeListener) {
		for (X vaporView : members)
			vaporView.checked(checkedChangeListener);
		return (self) this;

	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<Boolean> checked() {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).checked());
		return _returns;
	}

	/**
	 * Fluent equivalent Vapor method for invoking
	 * onRestoreInstanceState(Parcelable), a hook allowing a view to re-apply a
	 * representation of its internal state that had previously been generated by
	 * save(). This function will never be called with a null state.
	 * 
	 * @param state
	 *            The frozen state that had previously been returned by save().
	 * @return self
	 */
	public self restore(Parcelable state) {
		for (X vaporView : members)
			vaporView.restore(state);
		return (self) this;

	}

	/**
	 * Fluent equivalent Vapor method for invoking onSaveInstanceState(), a hook
	 * allowing a view to generate a representation of its internal state that
	 * can later be used to create a new instance with that same state.
	 * 
	 * @return Returns a Parcelable object containing the view's current dynamic
	 *         state, or null if there is nothing interesting to save. The
	 *         default implementation returns null.
	 */
	public ArrayList<Parcelable> save() {
		int _size = this.members.size();
		ArrayList<Parcelable> _returns = new ArrayList<Parcelable>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).save());
		return _returns;
	}

	/**
	 * Change the checked state of the view to the inverse of its current state
	 * 
	 * @return self
	 */
	public self tog() {
		for (X vaporView : members)
			vaporView.tog();
		return (self) this;

	}

}