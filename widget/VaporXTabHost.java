/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:14*/
package vapor.widget;

import java.util.ArrayList;

import android.app.LocalActivityManager;
import android.widget.FrameLayout;
import android.widget.TabHost;
import android.widget.TabWidget;

/**
 * Fluent variadic Vapor companion to TabHost, a container for a tabbed window
 * view. This object holds two children: a set of tab labels that the user
 * clicks to select a specific tab, and a FrameLayout object that displays the
 * contents of that page. The individual elements are typically controlled using
 * this container object, rather than setting values on the child elements
 * themselves.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <T>
 *            A standard Android type derived from TabHost
 * @param <X>
 *            A Vapor type derived from VaporTabHost
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public class VaporXTabHost<T extends TabHost, X extends VaporTabHost<T, ?>, self extends VaporXTabHost<T, X, self>>
		extends VaporXFrameLayout<T, X, self> {

	public VaporXTabHost(Integer... ids) {
		super(ids);
	}

	public VaporXTabHost(T... tabHosts) {
		super(tabHosts);
	}

	public VaporXTabHost(X... vaporTabHosts) {
		super(vaporTabHosts);
	}

	public VaporXTabHost(VaporXTabHost<T, X, ?>... vaporXTabHosts) {
		super(vaporXTabHosts);
	}

	public VaporXTabHost(Object... tabHostItems) {
		super(tabHostItems);
	}

	/**
	 * Add a tab.
	 * 
	 * @param tabSpec
	 *            Specifies how to create the indicator and content.
	 * @return self
	 */
	public self tab(TabHost.TabSpec tabSpec) {
		for (X vaporView : members)
			vaporView.tab(tabSpec);
		return (self) this;

	}

	/**
	 * Removes all tabs from the tab widget associated with this tab host.
	 * 
	 * @return self
	 */
	public self clear() {
		for (X vaporView : members)
			vaporView.clear();
		return (self) this;

	}

	/**
	 * Get the FrameLayout which holds tab content
	 * 
	 * @return
	 */
	public ArrayList<VFrameLayout<FrameLayout>> contentView() {
		int _size = this.members.size();
		ArrayList<VFrameLayout<FrameLayout>> _returns = new ArrayList<VFrameLayout<FrameLayout>>(
				_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).contentView());
		return _returns;
	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<Integer> itemSelected() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemSelected());
		return _returns;
	}

	/**
	 * 
	 * @param tabIndex
	 * @return
	 */
	public self itemSelected(int tabIndex) {
		for (X vaporView : members)
			vaporView.itemSelected(tabIndex);
		return (self) this;

	}

	/**
	 * 
	 * @param tabTag
	 * @return
	 */
	public self itemSelected(String tabTag) {
		for (X vaporView : members)
			vaporView.itemSelected(tabTag);
		return (self) this;

	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<String> itemSelectedTag() {
		int _size = this.members.size();
		ArrayList<String> _returns = new ArrayList<String>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).itemSelectedTag());
		return _returns;
	}

	/**
	 * Register a callback to be invoked when the selected state of any of the
	 * items in this list changes
	 * 
	 * @param tabChangedListener
	 *            The callback that will run
	 * @return self
	 */
	public self tab(vapor.listeners.widget.tabhost.$change tabChangedListener) {
		for (X vaporView : members)
			vaporView.tab(tabChangedListener);
		return (self) this;

	}

	/**
	 * If you are using setContent(android.content.Intent), this must be called
	 * since the activityGroup is needed to launch the local activity. This is
	 * done for you if you extend TabActivity.
	 * 
	 * @param activityGroup
	 *            Used to launch activities for tab content.
	 * @return self
	 */
	public self setup(LocalActivityManager activityGroup) {
		for (X vaporView : members)
			vaporView.setup(activityGroup);
		return (self) this;

	}

	/**
	 * Fluent equivalent Vapor method for invoking onTouchModeChanged(boolean),
	 * invoked when the touch mode changes.
	 * 
	 * @param isInTouchMode
	 *            True if the view hierarchy is now in touch mode, false
	 *            otherwise.
	 * @return self
	 */
	public self touchModeChanged(boolean isInTouchMode) {
		for (X vaporView : members)
			vaporView.touchModeChanged(isInTouchMode);
		return (self) this;

	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<VTabWidget<TabWidget>> widget() {
		int _size = this.members.size();
		ArrayList<VTabWidget<TabWidget>> _returns = new ArrayList<VTabWidget<TabWidget>>(
				_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).widget());
		return _returns;
	}

}