/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:14*/
package vapor.widget;

import android.widget.ZoomControls;

/**
 * Fluent variadic Vapor companion to ZoomControls, a class that displays a
 * simple set of controls used for zooming and provides callbacks to register
 * for events.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <T>
 *            A standard Android type derived from ZoomControls
 * @param <X>
 *            A Vapor type derived from VaporZoomControls
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public class VaporXZoomControls<T extends ZoomControls, X extends VaporZoomControls<T, ?>, self extends VaporXZoomControls<T, X, self>>
		extends VaporXLinearLayout<T, X, self> {

	public VaporXZoomControls(Integer... ids) {
		super(ids);
	}

	public VaporXZoomControls(T... zoomControlss) {
		super(zoomControlss);
	}

	public VaporXZoomControls(X... vaporZoomControlss) {
		super(vaporZoomControlss);
	}

	public VaporXZoomControls(
			VaporXZoomControls<T, X, ?>... vaporXZoomControlss) {
		super(vaporXZoomControlss);
	}

	public VaporXZoomControls(Object... zoomControlsItems) {
		super(zoomControlsItems);
	}

	/**
	 * 
	 * @return self
	 */
	public self hide() {
		for (X vaporView : members)
			vaporView.hide();
		return (self) this;

	}

	/**
	 * 
	 * @return self
	 * 
	 *         public self show(){ for(X vaporView : members) vaporView.show();
	 *         return (self)this;
	 * 
	 *         }
	 */

	/**
	 * 
	 * @param zoomSpeed
	 * @return this
	 */
	public self speed(long zoomSpeed) {
		for (X vaporView : members)
			vaporView.speed(zoomSpeed);
		return (self) this;

	}

	/**
	 * 
	 * @param zoomInListener
	 * @return this
	 */
	public self zoomIn(vapor.listeners.view.$click zoomInListener) {
		for (X vaporView : members)
			vaporView.zoomIn(zoomInListener);
		return (self) this;

	}

	/**
	 * 
	 * @param zoomOutListener
	 * @return this
	 */
	public self zoomOut(vapor.listeners.view.$click zoomOutListener) {
		for (X vaporView : members)
			vaporView.zoomOut(zoomOutListener);
		return (self) this;

	}

	/**
	 * 
	 * @param zoomInEnabled
	 * @return this
	 */
	public self zoomableIn(boolean zoomInEnabled) {
		for (X vaporView : members)
			vaporView.zoomableIn(zoomInEnabled);
		return (self) this;

	}

	/**
	 * 
	 * @param zoomOutEnabled
	 * @return this
	 */
	public self zoomableOut(boolean zoomOutEnabled) {
		for (X vaporView : members)
			vaporView.zoomableOut(zoomOutEnabled);
		return (self) this;

	}

}