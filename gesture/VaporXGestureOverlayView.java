/*	Vapor API Terms and Conditions
 *
 *  - You MAY NOT
 *  	- attempt to claim ownership of, or pass off the Vapor source code and materials as your own work unless:
 *
 *  		- used as constituent component in an Android application that you intend to release and/or profit from
 *
 *		- use or redistribute the Vapor source code and materials without explicit attribution to the owning parties
 *
 *  	- advertise Vapor in a misleading, inappropriate or offensive fashion
 *
 * - Indemnity
 * 		You agree to indemnify and hold harmless the authors of the Software and any contributors for any direct, indirect, 
 * 		incidental, or consequential third-party claims, actions or suits, as well as any related expenses, liabilities, damages, 
 * 		settlements or fees arising from your use or misuse of the Software, or a violation of any terms of this license.
 *  
 *  - DISCLAIMER OF WARRANTY
 *  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
 *		WARRANTIES OF QUALITY, PERFORMANCE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *  
 *  - LIMITATIONS OF LIABILITY
 *  	YOU ASSUME ALL RISK ASSOCIATED WITH THE INSTALLATION AND USE OF THE SOFTWARE. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * 		HOLDERS OF THE SOFTWARE BE LIABLE FOR CLAIMS, DAMAGES OR OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION WITH THE 
 *		SOFTWARE. LICENSE HOLDERS ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USE AND ASSUME ALL RISKS ASSOCIATED 
 *		WITH ITS USE, INCLUDING BUT NOT LIMITED TO THE RISKS OF PROGRAM ERRORS, DAMAGE TO EQUIPMENT, LOSS OF DATA OR SOFTWARE PROGRAMS, 
 *		OR UNAVAILABILITY OR INTERRUPTION OF OPERATIONS.
 *  
 *  Â© Darius Hodaei. License Version 1.1. Last Updated 30/06/2013.
*/

/*This file has been autogenerated by the Vapid Tool v1.0 @ 22/12/2012 22:43:04*/
package vapor.gesture;

import java.util.ArrayList;

import vapor.gesture.VaporGestureOverlayView.Listeners;
import vapor.widget.VaporXFrameLayout;
import android.gesture.Gesture;
import android.gesture.GestureOverlayView;
import android.gesture.GesturePoint;
import android.graphics.Path;

//Checked: 051220121244

/**
 * Fluent variadic Vapor companion to GestureOverlayView, a class that provides
 * a transparent overlay for gesture input, that can be placed on top of other
 * widgets or contain other widgets.
 * 
 * @author Darius H (darius@vapor-api.com)
 * @since 1.0
 * @param <T>
 *            A standard Android type derived from GestureOverlayView
 * @param <X>
 *            A Vapor type derived from VaporGestureOverlayView
 * @param <self>
 *            A recursively defined type that provides information for fluent
 *            method invocation
 */
public class VaporXGestureOverlayView<T extends GestureOverlayView, X extends VaporGestureOverlayView<T, ?>, self extends VaporXGestureOverlayView<T, X, self>>
		extends VaporXFrameLayout<T, X, self> {

	public VaporXGestureOverlayView(Integer... ids) {
		super(ids);
	}

	public VaporXGestureOverlayView(T... gestureOverlayViews) {
		super(gestureOverlayViews);
	}

	public VaporXGestureOverlayView(X... vaporGestureOverlayViews) {
		super(vaporGestureOverlayViews);
	}

	public VaporXGestureOverlayView(
			VaporXGestureOverlayView<T, X, ?>... vaporXGestureOverlayViews) {
		super(vaporXGestureOverlayViews);
	}

	public VaporXGestureOverlayView(Object... gestureOverlayViewItems) {
		super(gestureOverlayViewItems);
	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Float> angleThreshold() {
		int _size = this.members.size();
		ArrayList<Float> _returns = new ArrayList<Float>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).angleThreshold());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self angleThreshold(float strokeAngleThreshold) {
		for (X vaporView : members)
			vaporView.angleThreshold(strokeAngleThreshold);
		return (self) this;

	}

	/**
	 * 
	 * @return self
	 */
	public self cancel() {
		for (X vaporView : members)
			vaporView.cancel();
		return (self) this;

	}

	/**
	 * 
	 * @return self
	 */
	public self cancelClearAnim() {
		for (X vaporView : members)
			vaporView.cancelClearAnim();
		return (self) this;

	}

	/**
	 * 
	 * @param animated
	 *            whether to animate the clearing
	 * @return self
	 */
	public self clear(boolean animated) {
		for (X vaporView : members)
			vaporView.clear(animated);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Integer> color() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).color());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self color(int color) {
		for (X vaporView : members)
			vaporView.color(color);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Integer> colorUncertain() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).colorUncertain());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self colorUncertain(int color) {
		for (X vaporView : members)
			vaporView.colorUncertain(color);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Boolean> fades() {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).fades());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self fades(boolean fadeEnabled) {
		for (X vaporView : members)
			vaporView.fades(fadeEnabled);
		return (self) this;

	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<Long> fadeOffset() {
		int _size = this.members.size();
		ArrayList<Long> _returns = new ArrayList<Long>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).fadeOffset());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self fadeOffset(long fadeOffset) {
		for (X vaporView : members)
			vaporView.fadeOffset(fadeOffset);
		return (self) this;

	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<Gesture> gesture() {
		int _size = this.members.size();
		ArrayList<Gesture> _returns = new ArrayList<Gesture>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).gesture());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self gesture(Gesture gesture) {
		for (X vaporView : members)
			vaporView.gesture(gesture);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Boolean> gesturing() {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).gesturing());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Boolean> gestureViz() {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).gestureViz());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self gestureViz(boolean visible) {
		for (X vaporView : members)
			vaporView.gestureViz(visible);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Boolean> intercept() {
		int _size = this.members.size();
		ArrayList<Boolean> _returns = new ArrayList<Boolean>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).intercept());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self intercept(boolean eventsInterceptionEnabled) {
		for (X vaporView : members)
			vaporView.intercept(eventsInterceptionEnabled);
		return (self) this;

	}

	/**
	 * 
	 * @return self
	 */
	public self gesture(
			vapor.listeners.gesture.gestureoverlayview.$gesture gestureListener) {
		for (X vaporView : members)
			vaporView.gesture(gestureListener);
		return (self) this;

	}

	/**
	 * 
	 * @return self
	 */
	public self gesturePerf(
			vapor.listeners.gesture.gestureoverlayview.$gesturePerf gesturePerformedListener) {
		for (X vaporView : members)
			vaporView.gesturePerf(gesturePerformedListener);
		return (self) this;

	}

	/**
	 * 
	 * @return self
	 */
	public self gesturing(
			vapor.listeners.gesture.gestureoverlayview.$gesturing gesturingListener) {
		for (X vaporView : members)
			vaporView.gesturing(gesturingListener);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Integer> orientation() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).orientation());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self orientation(int orientation) {
		for (X vaporView : members)
			vaporView.orientation(orientation);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Path> path() {
		int _size = this.members.size();
		ArrayList<Path> _returns = new ArrayList<Path>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).path());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Path> path(Path path) {
		int _size = this.members.size();
		ArrayList<Path> _returns = new ArrayList<Path>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).path(path));
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self remove(
			vapor.listeners.gesture.gestureoverlayview.$gesture gestureListener) {
		for (X vaporView : members)
			vaporView.remove(gestureListener);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self remove(
			vapor.listeners.gesture.gestureoverlayview.$gesturePerf gesturePerformedListener) {
		for (X vaporView : members)
			vaporView.remove(gesturePerformedListener);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self remove(
			vapor.listeners.gesture.gestureoverlayview.$gesturing gesturingListener) {
		for (X vaporView : members)
			vaporView.remove(gesturingListener);
		return (self) this;

	}

	/**
	 * Removes all listeners of the given type that are currently attached to
	 * this views
	 * 
	 * @param gestureListener
	 *            A Listeners enum type of gesture listener to remove
	 * @return self
	 */
	public self remove(Listeners gestureListener) {
		for (X vaporView : members)
			vaporView.remove(gestureListener);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self removeGesturingListeners() {
		for (X vaporView : members)
			vaporView.removeGesturingListeners();
		return (self) this;

	}

	/**
	 * 
	 * @return
	 */
	public ArrayList<ArrayList<GesturePoint>> stroke() {
		int _size = this.members.size();
		ArrayList<ArrayList<GesturePoint>> _returns = new ArrayList<ArrayList<GesturePoint>>(
				_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).stroke());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Float> lengthThreshold() {
		int _size = this.members.size();
		ArrayList<Float> _returns = new ArrayList<Float>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).lengthThreshold());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self lengthThreshold(float strokeLengthThreshold) {
		for (X vaporView : members)
			vaporView.lengthThreshold(strokeLengthThreshold);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public ArrayList<Float> squarenessThreshold() {
		int _size = this.members.size();
		ArrayList<Float> _returns = new ArrayList<Float>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).squarenessThreshold());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self squarenessThreshold(float strokeSquarenessThreshold) {
		for (X vaporView : members)
			vaporView.squarenessThreshold(strokeSquarenessThreshold);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Integer> strokeType() {
		int _size = this.members.size();
		ArrayList<Integer> _returns = new ArrayList<Integer>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).strokeType());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self strokeType(int gestureStrokeType) {
		for (X vaporView : members)
			vaporView.strokeType(gestureStrokeType);
		return (self) this;

	}

	/**
	 * 
	 * 
	 * @return
	 */
	public ArrayList<Float> strokeWidth() {
		int _size = this.members.size();
		ArrayList<Float> _returns = new ArrayList<Float>(_size);
		for (int _index = 0; _index < _size; _index++)
			_returns.add(this.members.get(_index).strokeWidth());
		return _returns;
	}

	/**
	 * 
	 * 
	 * @return self
	 */
	public self strokeWidth(float gestureStrokeWidth) {
		for (X vaporView : members)
			vaporView.strokeWidth(gestureStrokeWidth);
		return (self) this;

	}

}